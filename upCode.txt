<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>HTpy</title>
    <style>
      #Gui1editBox {
        width: 500px;
        height: 300px;

        font-size: 1em;
        border-radius: 0.3rem;
        z-index: 9999;
      }

      #Gui1codeBox {
        width: 500px;
        height: 300px;

        font-size: 1em;
        border-radius: 0.3rem;
        z-index: 9999;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background-color: #1a1818;
        color: #ffffff;
        display: flex;
        flex-direction: column;
      }

      .controls {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 1rem;
        margin: 1rem;
        padding: 1rem;
      }

      button,
      .delay-wrapper {
        margin: 0.5rem;
        padding: 0.7rem;

        font-size: 1.2em;
        cursor: pointer;
        margin: 0.5rem;
        background-color: #bababa;
        color: #000000;
        border: none;
        border-radius: 0.2rem;
        transition: background-color 0.3s;
        align-self: center;
        text-wrap: nowrap;
        min-width: 8rem;
      }

      button:hover {
        background-color: #27ae60;
      }

      #result {
        margin-top: 1rem;
        font-size: 1.2em;
        color: #999c9a;
        font-weight: bold;
      }

      .pop-up {
        background-color: #1a1818;
        text-align: center;
      }

      .pop-up .content {
        display: flex;
        height: 90dvh;
        width: 80dvw;
        flex-direction: column;
        justify-content: space-between;
        margin: 0;
        padding: 0;
      }

      .delay {
        background-color: transparent;
        align-self: center;
        border: none;
        color: #ffffff;
        /* Set the text color to white */
        font-size: 1.5rem;
        padding: 0;
        text-align: center;
        width: 3.5rem;
        height: 1.5rem;
      }

      .delay:focus,
      .delay:active {
        outline: none !important;
      }

      .delay-wrapper i {
        align-self: center;
      }

      .delay-wrapper {
        display: flex;
        padding-left: 0.5rem;
        background-color: #27ae60;
        justify-content: space-evenly;
      }

      .show-bt {
        height: 2.7rem;
        padding: 0;
        margin: 0;
      }

      img {
        height: 75dvh !important;
      }

      .ace_print-margin {
        visibility: hidden !important;
      }

      .ace-monokai .ace_marker-layer .ace_active-line {
        background-color: #103010 !important;
      }

      .ace-monokai {
        background-color: #121212 !important;
        color: #f8f8f2;
      }

      .ace-monokai .ace_gutter {
        background: #204020 !important;
        color: #cbcdc3 !important;
      }

      .ace-monokai .ace_gutter-active-line {
        background-color: transparent !important;
      }

      .ace-monokai .ace_entity.ace_name.ace_tag,
      .ace-monokai .ace_keyword,
      .ace-monokai .ace_meta.ace_tag,
      .ace-monokai .ace_storage {
        color: #40a0e0 !important;
      }

      .ace-monokai .ace_entity.ace_name.ace_function,
      .ace-monokai .ace_entity.ace_other,
      .ace-monokai .ace_entity.ace_other.ace_attribute-name,
      .ace-monokai .ace_variable {
        color: #ff80df !important;
      }

      .ace-monokai .ace_comment {
        color: #40d080 !important;
      }

      .ace-monokai .ace_string {
        color: #ffa0a0 !important;
      }

      .ace-monokai .ace_punctuation,
      .ace-monokai .ace_punctuation.ace _tag {
        color: #ffa0a0 !important;
      }

      *::-webkit-scrollbar {
        width: 1em;
      }

      *::-webkit-scrollbar-track {
        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
      }

      *::-webkit-scrollbar-thumb {
        background-color: darkgrey;
        outline: 1px solid slategrey;
      }
    </style>
  </head>

  <body>
    <!-- <textarea id="ahkCode" placeholder="Write your AHK code here..."></textarea> -->

    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.2/ace.js" integrity="sha512-JLIRlxWh96sND3uUgI2RVHZJpgkWHg3+xoUY8XkgTPKpqRaqdk7zD/ck/XHXFSMW84o6GrP67dlqN3b98NB/yA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
      // JavaScript equivalent code with variables

      function changeFaviconAtTheBeginning(faviconUrl) {
        // Create a new favicon link element
        const newFavicon = document.createElement("link");
        newFavicon.rel = "icon";
        newFavicon.href = faviconUrl;

        // Get the current favicon element (if exists)
        const existingFavicon = document.querySelector('link[rel="icon"]');

        // Replace the current favicon with the new one
        if (existingFavicon) {
          // If a favicon exists, replace it
          document.head.removeChild(existingFavicon); // Remove the existing favicon
        }

        // Append the new favicon to the head
        document.head.appendChild(newFavicon);
      }

      // Call the function with the desired favicon URL
      changeFaviconAtTheBeginning("https://i.ibb.co/Jpty1B8/305182938-1a0efe63-726e-49ca-a13c-d0ed627f2ea7.png");

      let lastInputTime = Date.now(); // Initialize with current timestamp
      let startTimestamp = Date.now(); // Initialize with current timestamp

      // Event listener to track user activity
      function resetIdleTimer() {
        lastInputTime = Date.now(); // Update last input time
      }

      document.addEventListener("mousemove", resetIdleTimer);
      document.addEventListener("keypress", resetIdleTimer);

      // Function to calculate time since last input event
      function A_TimeIdle() {
        return Date.now() - lastInputTime; // Calculate time difference
      }

      // Function to calculate tick count in milliseconds
      function A_TickCount() {
        return Date.now() - startTimestamp;
      }

      function BuildInVars(varName) {
        switch (varName) {
          case "A_ScreenWidth":
            // Return screen width
            return window.innerWidth;
          case "A_LastKey":
            // Return screen width
            return getLastKeyPressed();
          case "A_ScreenHeight":
            // Return screen height
            return window.innerHeight;
          case "A_TimeIdle":
            // Return time idle
            return A_TimeIdle();
          case "A_TickCount":
            // Return tick count in milliseconds
            return A_TickCount();
          case "A_Now":
            // Return current local timestamp
            return new Date().toLocaleString();
          case "A_YYYY":
            // Return current year
            return new Date().getFullYear();
          case "A_MM":
            // Return current month
            return (new Date().getMonth() + 1).toString().padStart(2, "0");
          case "A_DD":
            // Return current day
            return new Date().getDate().toString().padStart(2, "0");
          case "A_MMMM":
            // Return full month name
            return new Date().toLocaleDateString(undefined, { month: "long" });
          case "A_MMM":
            // Return short month name
            return new Date().toLocaleDateString(undefined, { month: "short" });
          case "A_DDDD":
            // Return full day name
            return new Date().toLocaleDateString(undefined, { weekday: "long" });
          case "A_DDD":
            // Return short day name
            return new Date().toLocaleDateString(undefined, { weekday: "short" });
          case "A_Hour":
            // Return current hour
            return new Date().getHours().toString().padStart(2, "0");
          case "A_Min":
            // Return current minute
            return new Date().getMinutes().toString().padStart(2, "0");
          case "A_Sec":
            // Return current second
            return new Date().getSeconds().toString().padStart(2, "0");
          case "A_Space":
            // Return space character
            return " ";
          case "A_Tab":
            // Return tab character
            return "\t";

          default:
            // Handle unknown variable names
            return null;
        }
      }

      function Chr(number) {
        // Check if the number is null
        if (number === null) {
          // Return an empty string
          return "";
        }

        // Check if the number is within the valid range
        if (number >= 0 && number <= 0x10ffff) {
          // Convert the number to a character using String.fromCharCode
          return String.fromCharCode(number);
        } else {
          // Return an empty string for invalid numbers
          return "";
        }
      }

      // Function to simulate Sleep
      function sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
      }

      // InStr
      function InStr(Haystack, Needle, CaseSensitive = true, StartingPos = 1, Occurrence = 1) {
        if (Haystack === null || Needle === null) return false;

        // Adjust starting position if less than 1
        StartingPos = Math.max(StartingPos, 1);

        // Case-sensitive search by default
        if (!CaseSensitive) {
          Haystack = Haystack.toLowerCase();
          Needle = Needle.toLowerCase();
        }

        let pos = -1;
        let count = 0;
        for (let i = StartingPos - 1; i < Haystack.length; i++) {
          if (Haystack.substring(i, i + Needle.length) === Needle) {
            count++;
            if (count === Occurrence) {
              pos = i + 1;
              break;
            }
          }
        }

        return pos > 0; // Return true if the substring is found, false otherwise
      }

      function SubStr(str, startPos, length) {
        // If str is null or undefined, return an empty string
        if (str === null || str === undefined) {
          return "";
        }

        // If length is not provided or is blank, default to "all characters"
        if (length === undefined || length === "") {
          length = str.length - startPos + 1;
        }

        // If startPos is less than 1, adjust it to start from the end of the string
        if (startPos < 1) {
          startPos = str.length + startPos;
        }

        // Extract the substring based on startPos and length
        return str.substr(startPos - 1, length);
      }

      function Trim(inputString) {
        // Check if inputString is null or undefined
        if (inputString == null) {
          return ""; // Return an empty string if inputString is null or undefined
        }
        return inputString.replace(/^\s+|\s+$/g, ""); // Removes leading and trailing whitespace
      }

      function StrReplace(originalString, find, replaceWith) {
        // Check if originalString is a string
        if (typeof originalString !== "string") {
          return originalString; // Return originalString as is
        }

        // Escape special characters in the 'find' string to be used literally
        const escapedFind = find.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");

        // Use replace method to replace all occurrences of 'find' with 'replaceWith'
        return originalString.replace(new RegExp(escapedFind, "g"), replaceWith);
      }

      // Function to trim specified number of characters from the left side of a string
      function StringTrimLeft(input, numChars) {
        if (input && input.length >= numChars) {
          return input.substring(numChars);
        } else {
          return input; // Return original input if trimming is not possible
        }
      }

      // Function to trim specified number of characters from the right side of a string
      function StringTrimRight(input, numChars) {
        if (input && input.length >= numChars) {
          return input.substring(0, input.length - numChars);
        } else {
          return input; // Return original input if trimming is not possible
        }
      }

      // Object to store timer intervals for different functions
      const timerIntervals = {};

      async function SetTimer(func, timeOrOnOff) {
        if (typeof func !== "function" || typeof timeOrOnOff === "undefined") {
          console.error("Invalid arguments. Please provide a valid function and time/On/Off state.");
          return;
        }

        if (typeof timeOrOnOff === "number") {
          // If a number is provided, set the timer to that time in milliseconds and start it.
          func.interval = timeOrOnOff; // Store the interval within the function
          func(); // Call the function initially
          func.intervalId = setInterval(func, timeOrOnOff);
          timerIntervals[func] = func.intervalId; // Store the interval ID
        } else if (timeOrOnOff === "On") {
          // If 'On' is provided, start the timer if it's not already running.
          if (!func.intervalId && func.interval) {
            func(); // Call the function initially
            func.intervalId = setInterval(func, func.interval); // Start with the stored interval
            timerIntervals[func] = func.intervalId; // Store the interval ID
          } else {
            console.error("Timer is not set. Please provide a valid interval.");
          }
        } else if (timeOrOnOff === "Off") {
          // If 'Off' is provided, clear the timer if it's running.
          clearInterval(func.intervalId);
          func.intervalId = null;
          delete timerIntervals[func]; // Remove the interval ID from storage
        } else {
          console.error("Invalid time/On/Off state. Please provide a valid time in milliseconds or 'On'/'Off'.");
        }
      }

      function GuiControl(action, id, param1, param2, param3, param4) {
        const element = document.getElementById(id);

        if (element) {
          // Handle DOM elements
          if (action === "move") {
            // Set position and size
            element.style.left = param1 + "px";
            element.style.top = param2 + "px";
            element.style.width = param3 + "px";
            element.style.height = param4 + "px";
          } else if (action === "focus" && (element instanceof HTMLInputElement || element instanceof HTMLElement)) {
            // Focus on the element
            element.focus();
          } else if (action === "text") {
            // Set new text content
            element.value() = param1;
          } else if (action === "hide") {
            // Hide the element
            element.style.display = "none";
          } else if (action === "show") {
            // Show the element
            element.style.display = "";
          } else if (action === "enable") {
            // Enable the element
            element.disabled = false;
          } else if (action === "disable") {
            // Disable the element
            element.disabled = true;
          } else if (action === "font") {
            // Set font size
            element.style.fontSize = param1 + "px";
          } else if (action === "color") {
            // Set color
            element.style.color = param1;
          } else if (action === "picture") {
            // Change the image source
            if (element instanceof HTMLImageElement) {
              element.src = param1;
            } else {
              console.error("Element is not an <img> tag, cannot change picture.");
            }
          }
        } else {
          // Handle canvas or non-existing element
          if (action === "move") {
            // Update position and size of the rectangle
            updateRectangle(id, param1, param2, param3, param4);
            redrawCanvas(); // Redraw the canvas with updated rectangles
          } else if (action === "color") {
            // Update color of the rectangle
            updateRectangleColor(id, param1);
            redrawCanvas(); // Redraw the canvas with updated rectangles
          }
        }
      }

      // Function to simulate AutoHotkey's RegExReplace in JavaScript
      function RegExReplace(inputStr, regexPattern, replacement) {
          // Create a regular expression object using the provided pattern
          const regex = new RegExp(regexPattern, 'g'); // 'g' flag for global match

          // Use the replace() method to perform the regex replacement
          const resultStr = inputStr.replace(regex, replacement);

          // Return the modified string
          return resultStr;
      }


      function StrSplit(inputStr, delimiter, num) {
    // Split the input string based on the delimiter
    const parts = inputStr.split(delimiter);

    // Return the part specified by the num parameter (1-based index)
    if (num > 0 && num <= parts.length) {
        return parts[num - 1]; // Return the specified part (0-based index)
    } else {
        return ''; // Return an empty string if num is out of range
    }
}

   function MakeHotKey(hotkey, callback) {
        document.addEventListener("keydown", function (event) {
          const keys = hotkey.split("+").map((key) => key.trim().toLowerCase());
          const modifiers = {
            ctrl: event.ctrlKey,
            shift: event.shiftKey,
            alt: event.altKey,
          };

          let hotkeyPressed = true;
          keys.forEach((key) => {
            if (key === "ctrl" || key === "shift" || key === "alt") {
              if (!modifiers[key]) {
                hotkeyPressed = false;
              }
            } else if (key === "backspace") {
              if (event.key !== "Backspace") {
                hotkeyPressed = false;
              }
            } else if (key.startsWith("arrow")) {
              const arrowDirection = key.replace("arrow", "");
              if (arrowDirection === "up" && event.key !== "ArrowUp") {
                hotkeyPressed = false;
              } else if (arrowDirection === "down" && event.key !== "ArrowDown") {
                hotkeyPressed = false;
              } else if (arrowDirection === "left" && event.key !== "ArrowLeft") {
                hotkeyPressed = false;
              } else if (arrowDirection === "right" && event.key !== "ArrowRight") {
                hotkeyPressed = false;
              }
            } else if (key === "enter") {
              if (event.key !== "Enter") {
                hotkeyPressed = false;
              }
            } else if (!event.key.match(/^[0-9a-zA-Z]$/) && event.key !== key) {
              hotkeyPressed = false;
            } else if (event.key.toLowerCase() !== key && event.key.match(/^[a-zA-Z]$/)) {
              hotkeyPressed = false;
            }
          });

          if (hotkeyPressed) {
            if (modifiers["shift"]) {
              callback(hotkey.toUpperCase());
            } else {
              callback(hotkey.toLowerCase());
            }
          }
        });
      }

      function isMobileDevice() {
        return /Mobi|Android/i.test(navigator.userAgent);
      }


      function StrLower(string) {
        return string.toLowerCase();
      }

      // Single async function to structure the entire script
      async function runScript() {
        // Declare and assign a variable
        let variables = {
          A_Index: null,
          A_LoopField: null,
          allowPos: null,
          characters: null,
          CheckIFandElsesss1: null,
          CheckIFandElsesss2: null,
          CheckIFandElsesss3: null,
          CheckIFandElsesss4: null,
          CheckIFandElsesss5: null,
          CheckIFandElsesss6: null,
          CheckIFandElsesss7: null,
          CheckIFandElsesss8: null,
          CheckIFandElsesssNum: null,
          CheckIFandElsesssNumNum: null,
          chr34: null,
          current_indent: null,
          editBoxX2: null,
          editBoxX: null,
          editBoxY: null,
          editH1: null,
          editH2: null,
          fixVarNums: null,
          foundAnum: null,
          functionNames: null,
          goForItChnageTheEqualSing: null,
          Gui: null,
          GuiControl: null,
          HTpyCode: null,
          HTpyCodeD1: null,
          HTpyWebsiteToggle1: null,
          HTpyWebsiteToggle2: null,
          ifOnlyNum: null,
          indent_nested_curly_braces: null,
          indent_size: null,
          input_string: null,
          lineDone: null,
          normalVarNo34: null,
          numOfStr: null,
          numStrNums2: null,
          numStrNums: null,
          oldA_ScreenHeight: null,
          oldA_ScreenWidth: null,
          onceImportTime: null,
          out: null,
          outSTR: null,
          outt1: null,
          outt2: null,
          outt3: null,
          outVar2: null,
          pos: null,
          posNum: null,
          pyCode: null,
          pyCodeFinal: null,
          pyCodeOut1234565432: null,
          RepeatSpaces: null,
          result: null,
          sendButtonX: null,
          sendButtonY: null,
          spaces: null,
          str1: null,
          str: null,
          StrSplit: null,
          toggle2X: null,
          transpileVar: null,
          trimmed_line: null,
          usedLib: null,
          var1: null,
          var2: null,
          varr1: null,
          varr2: null,
          varr3: null,
          varVar1: null,
          varVar2: null,
          varVar: null,
          weEverUseVars: null,
          weUseRandomAtLeastOnce: null,
          whatVarWeUse: null,
          WidthOfBoxes: null,
        };

let funcs = {
  transpileVariables: transpileVariables,
  isVarAnumKindaVar: isVarAnumKindaVar,
  varDetect: varDetect,
  StrSplit: StrSplit,
}

        let Gui1 = {};
        Gui1 = document.createElement("div");

   MakeHotKey("Ctrl+Enter", function (hotkey) {
          HotKeyCalledCtrlEnter();
        });

        MakeHotKey("Ctrl+V", function (hotkey) {
          HotKeyCalledCtrlV();
        });

        // HTpy
        variables.funcs_func = "LoopParseFunc|new"

variables.func_LoopParseFunc_func = `

def LoopParseFunc(var, delimiter1="", delimiter2=""):
    import re
    if not delimiter1 and not delimiter2:
        # If no delimiters are provided, return a list of characters
        items = list(var)
    else:
        # Construct the regular expression pattern for splitting the string
        pattern = r'[' + re.escape(delimiter1) + re.escape(delimiter2) + r']+'

        # Split the string using the constructed pattern
        items = re.split(pattern, var)

    return items

`;

variables.func_new_func = `

new

`;


        Gui1.style.position = "absolute";
        Gui1.style.width = window.innerWidth + "px"; // Set the width
        Gui1.style.height = "" + BuildInVars("A_ScreenHeight") + "px"; // Set the height
        Gui1.style.background = "linear-gradient(90deg, " + "#202020" + " 0%, " + "#202020" + " 100%)";
        Gui1.style.backgroundColor = "linear-gradient(90deg, " + "#202020" + " 0%, " + "#202020" + " 100%)";
        Gui1.style.color = "white";
        Gui1.style.fontSize = "15px";
        Gui1.style.padding = "0px";
        Gui1.style.borderRadius = "0px";
        Gui1.style.fontFamily = ", sans-serif"; // Specify your desired font here
        Gui1.style.zIndex = "100";

        document.body.appendChild(Gui1); // Append the GUI window to the body
        Gui1.style.display = "block";

        document.documentElement.setAttribute("style", "padding: 0; margin: 0;");
        document.head.setAttribute("style", "padding: 0; margin: 0;");
        document.body.setAttribute("style", "overflow-x: hidden;padding: 0; margin: 0;");

      if ( await isMobileDevice ( ) )

      {

      variables.WidthOfBoxes =   ( BuildInVars("A_ScreenWidth") )  - 20;

      variables.editBoxX =   ( BuildInVars("A_ScreenWidth") - variables.WidthOfBoxes )  / 2;

      variables.editH1 =  BuildInVars("A_ScreenHeight") - 10;

      variables.editBoxY1 =   ( BuildInVars("A_ScreenHeight") - variables.editH1 )  / 2;

      variables.editBoxY2 =   ( BuildInVars("A_ScreenHeight") / 2 )  + 65;

      variables.editH1 =   ( BuildInVars("A_ScreenHeight") / 2 );

      variables.editH2 =  variables.editH1 - 70;

      variables.editBoxX =  10;

      variables.editBoxX2 =  10;

      Gui1editBox = document.createElement("div")
      Gui1editBox.id = "Gui1" + "editBox"; // Set ID for referencing
      Gui1editBox.placeholder = "put or type your HTpy code here...";
      Gui1editBox.style.fontSize = "18px"; // Set font size
      Gui1editBox.style.resize = "none"; // Disable resizing
      Gui1editBox.style.position = "absolute"; // Set position to absolute
      Gui1editBox.style.left = "" + variables.editBoxX + "px"; // Set initial x position
      Gui1editBox.style.top = "" + variables.editBoxY1 + "px"; // Set initial y position
      Gui1editBox.style.width = "" + variables.WidthOfBoxes + "px"; // Set width
      Gui1editBox.style.height = "" + variables.editH1 + "px"; // Set height
      Gui1editBox.style.border = ""
      Gui1editBox.style.color = "#ffffff"
      Gui1editBox.style.background = ""
      Gui1editBox.style.backgroundColor = "#303030"
      Gui1editBox.style.borderRadius = ""
      Gui1editBox.style.fontFamily = ", sans-serif"; // Specify your desired font here

        Gui1.appendChild(Gui1editBox);
        var Gui1editBox = ace.edit("Gui1editBox");
        Gui1editBox.setTheme("ace/theme/monokai");
        Gui1editBox.session.setMode("ace/mode/autohotkey");

        Gui1editBox.getSession().on("change", function () {
          A_GuiControl = Gui1editBox.getValue();
          CodeTextEditBox(A_GuiControl);
        });
	eval("Gui1editBox.setBehavioursEnabled(false);")

      Gui1codeBox = document.createElement("div")
      Gui1codeBox.id = "Gui1" + "codeBox"; // Set ID for referencing
      Gui1codeBox.placeholder = "";
      Gui1codeBox.style.fontSize = "18px"; // Set font size
      Gui1codeBox.style.resize = "none"; // Disable resizing
      Gui1codeBox.style.position = "absolute"; // Set position to absolute
      Gui1codeBox.style.left = "" + variables.editBoxX2 + "px"; // Set initial x position
      Gui1codeBox.style.top = "" + variables.editBoxY2 + "px"; // Set initial y position
      Gui1codeBox.style.width = "" + variables.WidthOfBoxes + "px"; // Set width
      Gui1codeBox.style.height = "" + variables.editH2 + "px"; // Set height
      Gui1codeBox.style.border = ""
      Gui1codeBox.style.color = "#ffffff"
      Gui1codeBox.style.background = ""
      Gui1codeBox.style.backgroundColor = "#303030"
      Gui1codeBox.style.borderRadius = ""
      Gui1codeBox.style.fontFamily = ", sans-serif"; // Specify your desired font here
      Gui1.appendChild(Gui1codeBox)


        var Gui1codeBox = ace.edit("Gui1codeBox");
        Gui1codeBox.setTheme("ace/theme/monokai");
        Gui1codeBox.session.setMode("ace/mode/python");

      eval("Gui1codeBox.setReadOnly(true);")


      variables.sendButtonX =   ( BuildInVars("A_ScreenWidth") - 140 )  / 2;

      variables.sendButtonY =  variables.editBoxY2 - 60;

      Gui1ButtonID = document.createElement("button")
      Gui1ButtonID.id = "Gui1" + "ButtonID"; // Set ID for referencing
      Gui1ButtonID.textContent = "Transpile";
      Gui1ButtonID.style.fontSize = "18px"; // Set font size
      Gui1ButtonID.style.position = "absolute"; // Set position to absolute
      Gui1ButtonID.style.left = "" + variables.sendButtonX + "px"; // Set initial x position
      Gui1ButtonID.style.top = "" + variables.sendButtonY + "px"; // Set initial y position
      Gui1ButtonID.style.width = "140px"; // Set width
      Gui1ButtonID.style.height = "40px"; // Set height
      Gui1ButtonID.style.cursor = "pointer"; // Change cursor on hover
      Gui1ButtonID.style.border = "";
      Gui1ButtonID.style.background = "";
      Gui1ButtonID.style.backgroundColor = "";
      Gui1ButtonID.style.borderRadius = "";
      Gui1ButtonID.style.color = "";
      Gui1ButtonID.style.fontFamily = ", sans-serif"; // Specify your desired font here
      Gui1ButtonID.onclick = function (event) {
      A_GuiControl = event.target.id.replace(/^Gui\d*/, "")
      Button(A_GuiControl)
      };
      Gui1.appendChild(Gui1ButtonID)

      GuiControl("focus", "Gui1editBox")

      variables.oldA_ScreenWidth =  BuildInVars("A_ScreenWidth");

      variables.oldA_ScreenHeight =  BuildInVars("A_ScreenHeight");

      }

      else

      {

      variables.WidthOfBoxes =   ( BuildInVars("A_ScreenWidth") / 2 )  - 20;

      variables.editBoxX =   ( BuildInVars("A_ScreenWidth") - variables.WidthOfBoxes )  / 2;

      variables.editH1 =  BuildInVars("A_ScreenHeight") - 10;

      variables.editBoxY =   ( BuildInVars("A_ScreenHeight") - variables.editH1 )  / 2;

      variables.editH1 =  BuildInVars("A_ScreenHeight") - 60;

      variables.editH2 =  variables.editH1;

      variables.editBoxX =  10;

      variables.editBoxX2 =  variables.WidthOfBoxes + 25;

      Gui1editBox = document.createElement("div")
      Gui1editBox.id = "Gui1" + "editBox"; // Set ID for referencing
      Gui1editBox.placeholder = "put or type your HTpy code here...";
      Gui1editBox.style.fontSize = "18px"; // Set font size
      Gui1editBox.style.resize = "none"; // Disable resizing
      Gui1editBox.style.position = "absolute"; // Set position to absolute
      Gui1editBox.style.left = "" + variables.editBoxX + "px"; // Set initial x position
      Gui1editBox.style.top = "" + variables.editBoxY + "px"; // Set initial y position
      Gui1editBox.style.width = "" + variables.WidthOfBoxes + "px"; // Set width
      Gui1editBox.style.height = "" + variables.editH1 + "px"; // Set height
      Gui1editBox.style.border = ""
      Gui1editBox.style.color = "#ffffff"
      Gui1editBox.style.background = ""
      Gui1editBox.style.backgroundColor = "#303030"
      Gui1editBox.style.borderRadius = ""
      Gui1editBox.style.fontFamily = ", sans-serif"; // Specify your desired font here

        Gui1.appendChild(Gui1editBox);
        var Gui1editBox = ace.edit("Gui1editBox");
        Gui1editBox.setTheme("ace/theme/monokai");
        Gui1editBox.session.setMode("ace/mode/autohotkey");

        Gui1editBox.getSession().on("change", function () {
          A_GuiControl = Gui1editBox.getValue();
          CodeTextEditBox(A_GuiControl);
        });
	eval("Gui1editBox.setBehavioursEnabled(false);")

      Gui1codeBox = document.createElement("div")
      Gui1codeBox.id = "Gui1" + "codeBox"; // Set ID for referencing
      Gui1codeBox.placeholder = "";
      Gui1codeBox.style.fontSize = "18px"; // Set font size
      Gui1codeBox.style.resize = "none"; // Disable resizing
      Gui1codeBox.style.position = "absolute"; // Set position to absolute
      Gui1codeBox.style.left = "" + variables.editBoxX2 + "px"; // Set initial x position
      Gui1codeBox.style.top = "" + variables.editBoxY + "px"; // Set initial y position
      Gui1codeBox.style.width = "" + variables.WidthOfBoxes + "px"; // Set width
      Gui1codeBox.style.height = "" + variables.editH2 + "px"; // Set height
      Gui1codeBox.style.border = ""
      Gui1codeBox.style.color = "#ffffff"
      Gui1codeBox.style.background = ""
      Gui1codeBox.style.backgroundColor = "#303030"
      Gui1codeBox.style.borderRadius = ""
      Gui1codeBox.style.fontFamily = ", sans-serif"; // Specify your desired font here
      Gui1.appendChild(Gui1codeBox)


        var Gui1codeBox = ace.edit("Gui1codeBox");
        Gui1codeBox.setTheme("ace/theme/monokai");
        Gui1codeBox.session.setMode("ace/mode/python");

        eval("Gui1codeBox.setReadOnly(true);")


      variables.sendButtonX =   ( BuildInVars("A_ScreenWidth") - 140 )  / 2;

      variables.sendButtonY =   ( BuildInVars("A_ScreenHeight") - 40 )  - 10;

      Gui1ButtonID = document.createElement("button")
      Gui1ButtonID.id = "Gui1" + "ButtonID"; // Set ID for referencing
      Gui1ButtonID.textContent = "Transpile";
      Gui1ButtonID.style.fontSize = "18px"; // Set font size
      Gui1ButtonID.style.position = "absolute"; // Set position to absolute
      Gui1ButtonID.style.left = "" + variables.sendButtonX + "px"; // Set initial x position
      Gui1ButtonID.style.top = "" + variables.sendButtonY + "px"; // Set initial y position
      Gui1ButtonID.style.width = "140px"; // Set width
      Gui1ButtonID.style.height = "40px"; // Set height
      Gui1ButtonID.style.cursor = "pointer"; // Change cursor on hover
      Gui1ButtonID.style.border = "";
      Gui1ButtonID.style.background = "";
      Gui1ButtonID.style.backgroundColor = "";
      Gui1ButtonID.style.borderRadius = "";
      Gui1ButtonID.style.color = "";
      Gui1ButtonID.style.fontFamily = ", sans-serif"; // Specify your desired font here
      Gui1ButtonID.onclick = function (event) {
      A_GuiControl = event.target.id.replace(/^Gui\d*/, "")
      Button(A_GuiControl)
      };
      Gui1.appendChild(Gui1ButtonID)

      GuiControl("focus", "Gui1editBox")

      variables.oldA_ScreenWidth =  BuildInVars("A_ScreenWidth");

      variables.oldA_ScreenHeight =  BuildInVars("A_ScreenHeight");

      SetTimer(onScreenSizeChange, 100);
      }


        return;

        async function onScreenSizeChange(A_GuiControl) {
          if (variables.oldA_ScreenWidth !== BuildInVars("A_ScreenWidth") || variables.oldA_ScreenHeight !== BuildInVars("A_ScreenHeight")) {
            variables.WidthOfBoxes = BuildInVars("A_ScreenWidth") / 2 - 20;

            variables.editBoxX = (BuildInVars("A_ScreenWidth") - variables.WidthOfBoxes) / 2;

            variables.editH1 = BuildInVars("A_ScreenHeight") - 80;

            variables.editBoxY = (BuildInVars("A_ScreenHeight") - variables.editH1) / 2;

            variables.editH1 = BuildInVars("A_ScreenHeight") - 80;

            variables.editH2 = variables.editH1;

            variables.editBoxX = 10;

            variables.editBoxX2 = variables.WidthOfBoxes + 25;

            GuiControl("move", "Gui1editBox", variables.editBoxX, 10, variables.WidthOfBoxes, variables.editH1);

            GuiControl("move", "Gui1codeBox", variables.editBoxX2, 10, variables.WidthOfBoxes, variables.editH2);

            eval("Gui1codeBox.readOnly = true;");

            variables.sendButtonX = (BuildInVars("A_ScreenWidth") - 140) / 2;

            variables.sendButtonY = BuildInVars("A_ScreenHeight") - 40 - 20;

            GuiControl("move", "Gui1ButtonID", variables.sendButtonX, variables.sendButtonY, 140, 40);

            GuiControl("focus", "Gui1editBox");

            variables.oldA_ScreenWidth = BuildInVars("A_ScreenWidth");

            variables.oldA_ScreenHeight = BuildInVars("A_ScreenHeight");
          }
        }

          async function CodeTextEditBox(A_GuiControl) {
          	// Remove carriage return characters (ASCII 13) from A_GuiControl
          	let sanitizedText = A_GuiControl.replace(/\r/g, '');

	          // Append sanitized text to variables.HTpyCode
        	  variables.HTpyCode = sanitizedText;

	          // Call Button function (assuming it returns a Promise)
        	  await Button();
      		}


