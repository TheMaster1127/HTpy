; HTpy

Gui, Font, s19
Gui, Show, +websiteMode w%A_ScreenWidth% h%A_ScreenHeight%

editBoxX := (A_ScreenWidth - 500) / 2
editBoxY := (A_ScreenHeight - 500) / 2

editBoxX := editBoxX - 250
editBoxX2 := editBoxX + 550
Gui, Add, Edit, x%editBoxX% y%editBoxY% w500 h500 veditBox gCodeTextEditBox cffffff bg303030, put or type your HTpy code here...
Gui, Add, Edit, x%editBoxX2% y%editBoxY% w500 h500 vcodeBox bg303030 cffffff

sendButtonX := (A_ScreenWidth - 140) / 2
sendButtonY := ((A_ScreenHeight - 40) / 2) + 280
Gui, Add, Button, x%sendButtonX% y%sendButtonY% w140 h40 gButton, Transpile

GuiControl, Focus, editBox
return

CodeTextEditBox:
HTpyCode := A_GuiControl
Return

Button:



pyCode := ""
out := ""
HTpyCodeD1 := ""

Loop, Parse, HTpyCode, `n, `r
{
HTpyCodeD1 .= Trim(A_LoopField) . "`n"
}
StringTrimRight, HTpyCode, HTpyCodeD1, 1




functionNames := ""

onceImportTime := 0
weUseRandomAtLeastOnce := 0
weEverUseVars := ""
usedLib := ""
Loop, Parse, HTpyCode, `n, `r
{
lineDone := 0
if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower("msgbox, "))
{
StringTrimLeft, var1, A_LoopField, 8

if (InStr(var1, "%"))
{
var2 := StrSplit(var1, "%", 2)

out := "print(variables['" . var2 . "'])"

}
else
{
out := "print(" . Chr(34) . var1 . Chr(34) . ")"
}

lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower("Random, "))
{
varr1 := StrSplit(A_LoopField, ",", 2)
varr2 := StrSplit(A_LoopField, ",", 3)
varr3 := StrSplit(A_LoopField, ",", 4)

outt1 := Trim(transpileVar(varr1))
outt2 := Trim(transpileVar(varr2))
outt3 := Trim(transpileVar(varr3))
weUseRandomAtLeastOnce++
if (weUseRandomAtLeastOnce = 1)
{
usedLib .= "import random`n"
}
out := outt1 . " = " . "random.randint(" . outt2 . ", " . outt3 . ")"

lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("sleep, "))
{

StringTrimLeft, var1, A_LoopField, 7

if (InStr(var1, "%"))
{
var2 := StrSplit(var1, "%", 2)

out := "time.sleep(" . var2 . " / 1000" . ")"

}
else
{
out := "time.sleep(" . var1 . " / 1000" . ")"
}
lineDone := 1
onceImportTime++
if (onceImportTime = 1)
{
usedLib .= "import time`n"
}
pyCode .= out . "`n"

}
else if (InStr(A_LoopField, " := ")) or (InStr(A_LoopField, " .= ")) or (InStr(A_LoopField, " += ")) or (InStr(A_LoopField, " -= ")) or (InStr(A_LoopField, " *= ")) && (lineDone = 0)
{
lineDone := 1
str := A_LoopField

whatVarWeUse := ""
if (InStr(A_LoopField, " := "))
{

whatVarWeUse := " = "

}
if (InStr(A_LoopField, " .= "))
{
whatVarWeUse := " += "
}
if (InStr(A_LoopField, " += "))
{
whatVarWeUse := " += "
}
if (InStr(A_LoopField, " -= "))
{
whatVarWeUse := " -= "
}
if (InStr(A_LoopField, " *= "))
{
whatVarWeUse := " *= "
}




str := StrReplace(str, ":=", "=")
str := StrReplace(str, ".=", "=")
str := StrReplace(str, "+=", "=")
str := StrReplace(str, "-=", "=")
str := StrReplace(str, "*=", "=")


var1 := Trim(StrSplit(str, "=", 1))
var2 := Trim(StrSplit(str, "=", 2))
if (InStr(var1, "%"))
{
varVar1 := Trim(StrSplit(var1, "%", 1))
varVar2 := Trim(StrSplit(var1, "%", 2))


var1 := "variables[f'" . varVar1 . "{variables[" . Chr(34) . varVar2 . Chr(34) . "]}']"

}
else
{
var1 := "variables['" . var1 . "']"
}


outVar2 := ""
chr34 := 0
normalVarNo34 := 1

var2 := StrReplace(var2, Chr(34), "thoseasuvbasvasssaquatteigmaksrckandthemnscputthemback")
var2 := StrReplace(var2, Chr(40), " ( ")
var2 := StrReplace(var2, Chr(41), " ) ")
var2 := StrReplace(var2, Chr(44), " , ")

Loop, Parse, var2, " "
{
varVar := A_LoopField
;MsgBox, % varVar
if (!(InStr(varVar, "thoseasuvbasvasssaquatteigmaksrckandthemnscputthemback")))
{
if (normalVarNo34 = 1)
{
if (InStr(varVar, "%"))
{
varVar1 := Trim(StrSplit(varVar, "%", 1))
varVar2 := Trim(StrSplit(varVar, "%", 2))


varVar := "variables[f'" . varVar1 . "{variables[" . Chr(34) . varVar2 . Chr(34) . "]}']"

}
else
{
if !(ifOnlyNum(varVar))
{
varVar := "variables['" . varVar . "']"
}
}
if (A_LoopField = ".")
{
varVar := "+"
}


}
}

if (InStr(varVar, "thoseasuvbasvasssaquatteigmaksrckandthemnscputthemback"))
{
chr34++
normalVarNo34 := 0
}

if (chr34 = 2)
{
normalVarNo34 := 1
chr34 := 0
}

outVar2 .= varVar . A_Space
}
StringTrimRight, outVar2, outVar2, 1
outVar2 := StrReplace(outVar2, "thoseasuvbasvasssaquatteigmaksrckandthemnscputthemback", Chr(34))

weEverUseVars := "# Define a dictionary to store dynamic variables`nvariables = {}`n"


out := var1 . whatVarWeUse . outVar2

out := StrReplace(out, "variables['True']", "True")
out := StrReplace(out, "variables['False']", "False")
out := StrReplace(out, "variables['true']", "True")
out := StrReplace(out, "variables['false']", "False")

Loop, Parse, functionNames, "|"
{
out := StrReplace(out, "variables['" . A_LoopField . "']", A_LoopField)
}


pyCode .= out . "`n"

}
else
{
if (lineDone != 1)
{
pyCode .= A_LoopField . "`n"
}
}

} ; end of the parsing loop

pyCode := usedLib . "`n" . weEverUseVars . "`n" . pyCode

GuiControl, Text, codeBox, %pyCode%

Return

;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;

transpileVar(str)
{

outVar2 := ""
chr34 := 0
normalVarNo34 := 1
var2 := str
;MsgBox, % var2

var2 := StrReplace(var2, Chr(34), "thoseasuvbasvasssaquatteigmaksrckandthemnscputthemback")
var2 := StrReplace(var2, Chr(40), " ( ")
var2 := StrReplace(var2, Chr(41), " ) ")
var2 := StrReplace(var2, Chr(44), " , ")

Loop, Parse, var2, " "
{
varVar := A_LoopField
;MsgBox, % varVar
if (!(InStr(varVar, "thoseasuvbasvasssaquatteigmaksrckandthemnscputthemback")))
{
if (normalVarNo34 = 1)
{
if (InStr(varVar, "%"))
{
varVar1 := Trim(StrSplit(varVar, "%", 1))
varVar2 := Trim(StrSplit(varVar, "%", 2))


varVar := "variables[f'" . varVar1 . "{variables[" . Chr(34) . varVar2 . Chr(34) . "]}']"

}
else
{
if !(ifOnlyNum(varVar))
{
varVar := "variables['" . varVar . "']"
}
}
if (A_LoopField = ".")
{
varVar := "+"
}


}
}

if (InStr(varVar, "thoseasuvbasvasssaquatteigmaksrckandthemnscputthemback"))
{
chr34++
normalVarNo34 := 0
}

if (chr34 = 2)
{
normalVarNo34 := 1
chr34 := 0
}

outVar2 .= varVar . A_Space
}
StringTrimRight, outVar2, outVar2, 1
outVar2 := StrReplace(outVar2, "thoseasuvbasvasssaquatteigmaksrckandthemnscputthemback", Chr(34))

weEverUseVars := "# Define a dictionary to store dynamic variables`nvariables = {}`n"


out := outVar2

out := StrReplace(out, "variables['True']", "True")
out := StrReplace(out, "variables['False']", "False")
out := StrReplace(out, "variables['true']", "True")
out := StrReplace(out, "variables['false']", "False")

Loop, Parse, functionNames, "|"
{
out := StrReplace(out, "variables['" . A_LoopField . "']", A_LoopField)
}
return out
}


;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;


ifOnlyNum(str)
{
foundAnum := 0

str := Trim(str)
numOfStr := 0
Loop, Parse, str
{
numOfStr++
}

Loop, Parse, str
{
if (InStr(A_LoopField, "0")) or (InStr(A_LoopField, "1")) or (InStr(A_LoopField, "2")) or (InStr(A_LoopField, "3")) or (InStr(A_LoopField, "4")) or (InStr(A_LoopField, "5")) or (InStr(A_LoopField, "6")) or (InStr(A_LoopField, "7")) or (InStr(A_LoopField, "8")) or (InStr(A_LoopField, "9")) or (InStr(A_LoopField, Chr(40))) or (InStr(A_LoopField, Chr(41))) or (InStr(A_LoopField, Chr(42))) or (InStr(A_LoopField, Chr(43))) or (InStr(A_LoopField, Chr(45))) or (InStr(A_LoopField, Chr(46))) or (InStr(A_LoopField, Chr(47))) or (InStr(A_LoopField, Chr(44)))
{
foundAnum++
}
}

if (foundAnum = numOfStr)
{
return true
}

return false
}


StrSplit(str, delimiter, num)
{

if (num = 1)
{
out := ""
Loop, Parse, str
{

out .= A_LoopField

if (A_LoopField = delimiter)
{
StringTrimRight, out, out, 1
break
}

}
return out
}
else
{

str := delimiter . str

posNum := 0
allowPos := 0
out := ""
Loop, Parse, str
{

if (allowPos = 1)
{
out .= A_LoopField
}

if (A_LoopField = delimiter) && (allowPos = 1)
{

if (pos = num)
{
StringTrimRight, out, out, 1
break
}
else
{
allowPos := 0
out := ""
}

}
if (A_LoopField = delimiter) && (allowPos = 0)
{
allowPos := 1
posNum++
pos := posNum
}


} ; end of Loop
return out
}


} ; end of func


