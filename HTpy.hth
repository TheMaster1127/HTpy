; HTpy

Gui, Font, s19
Gui, Show, +websiteMode w%A_ScreenWidth% h%A_ScreenHeight%

editBoxX := (A_ScreenWidth - 500) / 2
editBoxY := (A_ScreenHeight - 500) / 2

editBoxX := editBoxX - 250
editBoxX2 := editBoxX + 550
Gui, Add, Edit, x%editBoxX% y%editBoxY% w500 h500 veditBox gCodeTextEditBox cffffff bg303030, put or type your HTpy code here...
Gui, Add, Edit, x%editBoxX2% y%editBoxY% w500 h500 vcodeBox bg303030 cffffff

sendButtonX := (A_ScreenWidth - 140) / 2
sendButtonY := ((A_ScreenHeight - 40) / 2) + 280
Gui, Add, Button, x%sendButtonX% y%sendButtonY% w140 h40 gButton, Transpile

GuiControl, Focus, editBox
return

CodeTextEditBox:
HTpyCode := A_GuiControl
Return

Button:



pyCode := ""
out := ""
HTpyCodeD1 := ""

Loop, Parse, HTpyCode, `n, `r
{
HTpyCodeD1 .= Trim(A_LoopField) . "`n"
}
StringTrimRight, HTpyCode, HTpyCodeD1, 1






onceImportTime := 0
weEverUseVars := ""
usedLib := ""
Loop, Parse, HTpyCode, `n, `r
{
lineDone := 0
if (SubStr(Trim(StrLower(A_LoopField)), 1, 8) = StrLower("msgbox, "))
{
StringTrimLeft, var1, A_LoopField, 8

if (InStr(var1, "%"))
{
var2 := StrSplit(var1, "%", 2)

out := "print(variables['" . var2 . "'])"

}
else
{
out := "print(" . Chr(34) . var1 . Chr(34) . ")"
}

lineDone := 1
pyCode .= out . "`n"
}
else if (SubStr(Trim(StrLower(A_LoopField)), 1, 7) = StrLower("sleep, "))
{

StringTrimLeft, var1, A_LoopField, 7

if (InStr(var1, "%"))
{
var2 := StrSplit(var1, "%", 2)

out := "time.sleep(" . var2 . " / 1000" . ")"

}
else
{
out := "time.sleep(" . var1 . " / 1000" . ")"
}
lineDone := 1
onceImportTime++
if (onceImportTime = 1)
{
usedLib .= "import time`n"
}
pyCode .= out . "`n"

}
else if (InStr(A_LoopField, " := ")) or (InStr(A_LoopField, " .= ")) or (InStr(A_LoopField, " += ")) or (InStr(A_LoopField, " -= ")) or (InStr(A_LoopField, " *= ")) && (lineDone = 0)
{
lineDone := 1
str := A_LoopField

whatVarWeUse := ""
if (InStr(A_LoopField, " := "))
{

whatVarWeUse := " = "

}
if (InStr(A_LoopField, " .= "))
{
whatVarWeUse := " += "
}
if (InStr(A_LoopField, " += "))
{
whatVarWeUse := " += "
}
if (InStr(A_LoopField, " -= "))
{
whatVarWeUse := " -= "
}
if (InStr(A_LoopField, " *= "))
{
whatVarWeUse := " *= "
}




str := StrReplace(str, ":=", "=")
str := StrReplace(str, ".=", "=")
str := StrReplace(str, "+=", "=")
str := StrReplace(str, "-=", "=")
str := StrReplace(str, "*=", "=")


var1 := Trim(StrSplit(str, "=", 1))
var2 := Trim(StrSplit(str, "=", 2))

if (InStr(var1, "%"))
{
varVar1 := Trim(StrSplit(var1, "%", 1))
varVar2 := Trim(StrSplit(var1, "%", 2))


var1 := "variables[f'" . varVar1 . "{variables[" . Chr(34) . varVar2 . Chr(34) . "]}']"

}
else
{
var1 := "variables['" . var1 . "']"
}

weEverUseVars := "# Define a dictionary to store dynamic variables`nvariables = {}`n"


out := var1 . whatVarWeUse . var2



pyCode .= out . "`n"

}
else
{
if (lineDone != 1)
{
pyCode .= A_LoopField . "`n"
}
}

} ; end of the parsing loop

pyCode := usedLib . "`n" . weEverUseVars . "`n" . pyCode


GuiControl, Text, codeBox, %pyCode%

Return






StrSplit(str, delimiter, num)
{

if (num = 1)
{
out := ""
Loop, Parse, str
{

out .= A_LoopField

if (A_LoopField = delimiter)
{
StringTrimRight, out, out, 1
break
}

}
return out
}
else
{

str := delimiter . str

posNum := 0
allowPos := 0
out := ""
Loop, Parse, str
{

if (allowPos = 1)
{
out .= A_LoopField
}

if (A_LoopField = delimiter) && (allowPos = 1)
{

if (pos = num)
{
StringTrimRight, out, out, 1
break
}
else
{
allowPos := 0
out := ""
}

}
if (A_LoopField = delimiter) && (allowPos = 0)
{
allowPos := 1
posNum++
pos := posNum
}


} ; end of Loop
return out
}


} ; end of func


